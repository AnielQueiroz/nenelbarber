generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  bookings      Booking[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id            String              @id @default(uuid())
  name          String
  address       String
  phones        String[]
  description   String
  imageUrl      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  subdomain     String              @unique
  socialMedia   String[]
  services      BarbershopService[]
  professionals Professional[]
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Professional {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  phone          String         @unique
  barbershopId   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  availabilities Availability[]
  bookings       Booking[]
  barbershop     Barbershop     @relation(fields: [barbershopId], references: [id])
}

model Availability {
  id             String       @id @default(uuid())
  professionalId String
  date           DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  timesArray     String[]
  professional   Professional @relation(fields: [professionalId], references: [id])
  timeSlots      TimeSlot[]
}

model TimeSlot {
  id             String       @id @default(uuid())
  availabilityId String
  time           DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  availability   Availability @relation(fields: [availabilityId], references: [id])
}

model Booking {
  id             String            @id @default(uuid())
  userId         String
  serviceId      String
  date           DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  professionalId String
  professional   Professional      @relation(fields: [professionalId], references: [id])
  service        BarbershopService @relation(fields: [serviceId], references: [id])
  user           User              @relation(fields: [userId], references: [id])
}
